@model IEnumerable<NiceAdmin.Models.ViewModels.DessertIndexVM>
@*EFModels.Dessert>*@

@{
    ViewBag.Title = "Index";
    //var categories = ViewBag.CategoryId as SelectList;
    //var criteria = ViewBag.Criteria as NiceAdmin.Models.ViewModels.DessertCriteria;
    //string s_categoryId = criteria.CategoryId.HasValue ? criteria.CategoryId.Value.ToString() : "";
    var categories = ViewBag.CategoryId as SelectList;
    var criteria = ViewBag.Criteria as NiceAdmin.Models.ViewModels.DessertCriteria;
    string s_categoryId = criteria.CategoryId.HasValue ? criteria.CategoryId.Value.ToString() : "";
}


<main id="main" class="main">
    <div class="pagetitle">
        <h1>甜點清單</h1>
        <nav>
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">首頁</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index","Desserts")">甜點管理</a></li>
                <li class="breadcrumb-item active"><a href="@Url.Action("Index","Desserts")">甜點清單</a></li>
            </ol>
        </nav>
    </div>
    <!-- End Page Title -->

    <button class="btn btn-outline-primary text-light fw-bold"> @Html.ActionLink("新增甜點", "Create")</button>
    <section class="container">
        <form method="get" autocomplete="off" action="@Url.Action("Index", "Desserts")">
            <div class="row autocomplete" style="width:100%;">
                <div class="mb-3 col-md-3">
                    <label for="s_name">商品名稱</label>
                    <input type="text" class="form-control" name="name" id="s_name" value="@criteria.Name">

                </div>
                <div class="mb-3 col-md-3">
                    <label for="s_categoryId">商品分類</label>
                    <select name="categoryId" id="s_categoryId" class="form-select">
                        @foreach (var item in categories)
                        {
                            <option value="@item.Value" @(s_categoryId == item.Value ? "selected" : "")>@item.Text</option>
                        }
                    </select>

                </div>
                <div class="mb-3 col-md-4">
                    <label for="s_minPrice" style="display: block">金額</label>
                    <input type="number" class="form-control" name="minPrice" id="s_minPrice" style="width: 40%; display: inline" value="@criteria.MinPrice"> ~
                    <input type="number" class="form-control" name="maxPrice" id="s_maxPrice" style="width: 40%; display: inline" value="@criteria.MaxPrice">

                </div>
                <div class="mb-3 col-md-2 align-self-end">
                    <button class="btn btn-outline-primary">查詢</button>
                </div>
            </div>
        </form>
    </section>
    <div class="table-responsive">
        <table class="table table-striped table-hover datatable" id="example">
            <thead>
                <tr>
                    <th>
                        @*分類名稱*@
                        @Html.DisplayNameFor(model => model.CategoryName)
                    </th>
                    <th>
                        @*甜點名稱*@
                        @Html.DisplayNameFor(model => model.DessertName)
                    </th>
                    <th>
                        @*售價*@
                        @Html.DisplayNameFor(model => model.UnitPrice)
                    </th>
                    <th>
                        @*描述*@
                        @Html.DisplayNameFor(model => model.DescriptionText)
                    </th>
                    <th>
                        @*狀態*@
                        @Html.DisplayNameFor(model => model.StatusText)
                    </th>
                    <th>
                        @*創建時間*@
                        @Html.DisplayNameFor(model => model.CreateTime)
                    </th>
                    <th>
                        功能
                    </th>

                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @*@Html.DisplayFor(modelItem => item.Category.CategoryName)*@
                            @Html.DisplayFor(modelItem => item.CategoryName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DessertName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UnitPrice)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DescriptionText)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StatusText)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreateTime)
                        </td>
                        <td>
                            @Html.ActionLink("編輯商品", "Edit", new { id = item.DessertId }) |
                            @Html.ActionLink("Details", "Details", new { id = item.DessertId }) |
                            @Html.ActionLink("刪除", "Delete", new { id = item.DessertId })
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</main>
@section Scripts{
    <script>
        //這段是要做AutoComplete
        var desserts = ["cake", "甜點", "chocolate", "cheese", "desserts", "dessert", "伯爵", "芒果", "草莓", "香草", "香蕉", "磅蛋糕"]
        /*function autocomplete(inp, arr) { ... }：這是一個自訂的自動完成函式。
        它接收兩個參數，inp代表文字輸入框的元素，arr代表建議項目的陣列。*/
        function autocompleteDesserts(inp, arr) {

            var currentFocus;

            /*inp.addEventListener("input", function (e) { ... })：
            這是一個事件監聽器，當使用者在輸入框中輸入文字時觸發。它會根據輸入的文字篩選建議項目並顯示。*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;

                /*closeAllLists() 函式：
                這個函式用於關閉所有已打開的建議清單，以便在選擇建議項目後或點擊其他地方時關閉它們。*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;


                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });

            //addActive() 函式：這個函式用於將某個建議項目標記為選中狀態，以便使用者可以使用鍵盤的上下鍵選擇不同的項目。
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;


                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }

            //removeActive() 函式：這個函式用於移除所有建議項目的選中狀態。
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        //autocomplete() 函式的餘下部分處理事件監聽和與建議項目相關的邏輯，包括創建建議項目的 DIV 元素、將它們添加到 DOM 中、監聽建議項目的點擊事件等。
        autocompleteDesserts(document.getElementById("s_name"), desserts);
    </script>
}