@model IEnumerable<NiceAdmin.Models.ViewModels.TeachersVM.TeacherIndexVM>


@{

    ViewBag.Title = "Index";
    var criteria = ViewBag.Criteria as NiceAdmin.Models.ViewModels.TeachersVM.TeacherCriteria;
    var error = ViewBag.ErrorMessag;

}
@*@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))*@

    @*<div class="alert alert-danger">@ViewBag.ErrorMessage</div>*@

<main id="main" class="main">
    <div class="row">
        <div class="card">
            <div class="card-body">
                <div class="pagetitle mt-3">
                    <h1>教師清單</h1>
                    <nav>
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">首頁</a></li>
                            <li class="breadcrumb-item">   師資管理  </li>
                            <li class="breadcrumb-item active">  教師清單  </li>
                        </ol>
                    </nav>
                </div>



                <section class="container">
                    <form method="get" autocomplete="off" action="@Url.Action("Index", "Teachers")">
                        <div class="row" autocomplete" style="width:100%;">
                            <div class="mb-3 col-md-2">
                                <label for="s_name">教師名稱</label>
                                <input type="text" class="form-control" name="TeacherName" id="s_name" value="@criteria.TeacherName">
                            </div>
                            <div class="mb-3 col-md-2">
                                <label for="s_name">是否在職</label>
                                <input type="text" class="form-control" name="TeacherStatusText" id="s_name" value="@criteria.TeacherStatusText">
                            </div>
                            <div class="mb-3 col-md-8 align-self-end ">
                                <button class="btn btn-primary">查詢教師名稱</button>
                                <button class="btn btn-success">查詢教師是否在職</button>
                                <button type="button" class="btn btn-outline-secondary" onclick="location.href='@Url.Action("ClearSearch")'">清除搜尋</button>
                                <button type="button" class="btn btn-outline-primary">@Html.ActionLink("新增師資", "Create")</button>
                            </div>
                        </div>
                    </form>
                </section>
                <div class="table-responsive">
                    <table class="table table-striped table-hover datatable" id="teacherDatatable">
                        <thead>
                            <tr>
                                <th class="d-none">
                                    @Html.DisplayNameFor(model => model.TeacherId)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.TeacherNameText)
                                </th>
                                @*<th>
                                        @Html.DisplayNameFor(model => model.TeacherImage)
                                    </th>*@
                                <th>
                                    @Html.DisplayNameFor(model => model.SpecialtyText)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.ExperienceText)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.LicenseText)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.AcademicText)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.TeacherStatusText)
                                </th>
                                <th>功能</th>
                            </tr>

                        </thead>
                        <tbody>

                            @foreach (var item in Model)
                            {
                                <tr>

                                    <td class="d-none">
                                        @Html.DisplayFor(modelItem => item.TeacherId)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TeacherNameText)
                                    </td>
                                    @*<td>
                                            @Html.DisplayFor(modelItem => item.TeacherImage)
                                        </td>*@
                                    <td>
                                        @Html.DisplayFor(modelItem => item.SpecialtyText)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ExperienceText)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LicenseText)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.AcademicText)
                                    </td>
                                    <td>
                                        @if (item.TeacherStatusText == "在職中")
                                        {
                                            <span class="badge bg-success">
                                                @Html.DisplayFor(modelItem => item.TeacherStatusText)
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                @Html.DisplayFor(modelItem => item.TeacherStatusText)
                                            </span>
                                        }

                                    </td>
                                    <td>
                                        <i class="bi bi-pencil-square">  </i> @Html.ActionLink("Edit", "Edit", new { id = item.TeacherId })|
                                        @Html.ActionLink("變更圖片", "EditImage", new { id = item.TeacherId }) |
                                        @Html.ActionLink("離職", "DownTeachers", new { id = item.TeacherId })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>


            </div>
        </div>
    </div>

</main>
@section Scripts{
    <script>

       $(document).ready(function () {
            var errMsg = "@ViewBag.ErrorMessage";
            if (errMsg) {
                Swal.fire({
                    icon: 'error',
                    title: '課程尚未結束',
                    text: errMsg
                });
           }
          
         
            
            




            //這段是要做AutoComplete
            var teachers = ["老師", "甜點", "專家", "證書", "學位", "課程", "烘焙", "吳", "糕點", "巧克力", "法式", "張"]
            /*function autocomplete(inp, arr) { ... }：這是一個自訂的自動完成函式。
            它接收兩個參數，inp代表文字輸入框的元素，arr代表建議項目的陣列。*/
            function autocompleteTeachers(inp, arr) {

                var currentFocus;

                /*inp.addEventListener("input", function (e) { ... })：
                這是一個事件監聽器，當使用者在輸入框中輸入文字時觸發。它會根據輸入的文字篩選建議項目並顯示。*/
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value;

                    /*closeAllLists() 函式：
                    這個函式用於關閉所有已打開的建議清單，以便在選擇建議項目後或點擊其他地方時關閉它們。*/
                    closeAllLists();
                    if (!val) { return false; }
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("DIV");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function (e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;


                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });

                //addActive() 函式：這個函式用於將某個建議項目標記為選中狀態，以便使用者可以使用鍵盤的上下鍵選擇不同的項目。
                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;


                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }

                //removeActive() 函式：這個函式用於移除所有建議項目的選中狀態。
                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }
                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            //autocomplete() 函式的餘下部分處理事件監聽和與建議項目相關的邏輯，包括創建建議項目的 DIV 元素、將它們添加到 DOM 中、監聽建議項目的點擊事件等。
            autocompleteTeachers(document.getElementById("s_name"), teachers);
        });

    </script>
}


